function [y, net] = TrainNet(x,t)
% Solve a Pattern Recognition Problem with a Neural Network
% Script generated by Neural Pattern Recognition app
% Created 23-Jun-2016 02:33:12
%
% This script assumes these variables are defined:
%
%   Xtrain1 - input data.
%   Ytrain1 - target data.

% if samples are arranged in rows
x = transpose(x);
t = transpose(t);

%x = Xtrain1';
%t = Ytrain1';

% Choose a Training Function
% For a list of all training functions type: help nntrain
% 'trainlm' is usually fastest.
% 'trainbr' takes longer but may be better for challenging problems.
% 'trainscg' uses less memory. Suitable in low memory situations.
%trainFcn = 'trainscg';  % Scaled conjugate gradient backpropagation.

% Create a Pattern Recognition Network
hiddenLayerSize = 10;
net = patternnet(hiddenLayerSize);

% Setup Division of Data for Training, Validation, Testing
net.divideParam.trainRatio = 80/100;
net.divideParam.valRatio = 10/100;
net.divideParam.testRatio = 10/100;
%net.trainParam.showWindow = false;

% Train the Network
[net,tr] = train(net,x,t);
%[net,tr] = train(net,x,t,'useParallel','yes');

% Test the Network

y = net(x);
e = gsubtract(t,y);
performance = perform(net,t,y)
tind = vec2ind(t);
yind = vec2ind(y);
percentErrors = sum(tind ~= yind)/numel(tind);

% View the Network
view(net)

% Plots
% Uncomment these lines to enable various plots.
figure, plotperform(tr)
%figure, plottrainstate(tr)
%figure, ploterrhist(e)
figure, plotconfusion(t,y)
figure, plotroc(t,y)
end

